// Generated by Apple Swift version 4.2.1 (swiftlang-1000.11.42 clang-1000.11.45.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import CoreBluetooth;
@import Dispatch;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="DesayBluetooth",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

typedef SWIFT_ENUM(NSInteger, APIState, closed) {
  APIStateNormal = 0,
  APIStateDfu = 1,
};

@class Band;
@class Scales;
@class Shoe;
@class Tracker;
@protocol DSBLEScanConnectDelegate;

SWIFT_CLASS("_TtC14DesayBluetooth13BLEAPIManager")
@interface BLEAPIManager : NSObject
/// 单例
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BLEAPIManager * _Nonnull shared;)
+ (BLEAPIManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Restore Key
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable restoreKey;)
+ (NSString * _Nullable)restoreKey SWIFT_WARN_UNUSED_RESULT;
+ (void)setRestoreKey:(NSString * _Nullable)value;
/// 手环
@property (nonatomic, strong) Band * _Nullable band;
/// 称
@property (nonatomic, strong) Scales * _Nullable scales;
/// 鞋子
@property (nonatomic, strong) Shoe * _Nullable shoe;
/// 追踪器
@property (nonatomic, strong) Tracker * _Nullable tracker;
/// mode
@property (nonatomic) BOOL debug;
- (void)setLogOnWithCode:(NSString * _Nonnull)code;
/// 外部需要的log反馈
@property (nonatomic, copy) void (^ _Nullable logOut)(NSString * _Nonnull);
@property (nonatomic, strong) id <DSBLEScanConnectDelegate> _Nullable delegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

enum BLEManagerState : NSUInteger;

@interface BLEAPIManager (SWIFT_EXTENSION(DesayBluetooth))
/// 版本
- (NSString * _Nonnull)version SWIFT_WARN_UNUSED_RESULT;
/// BLE State
@property (nonatomic, readonly) enum BLEManagerState bleState;
@end

@class CBUUID;

@interface BLEAPIManager (SWIFT_EXTENSION(DesayBluetooth))
- (void)scan;
- (void)scanWithServices:(NSArray<CBUUID *> * _Nullable)serviceUUIDs options:(NSDictionary<NSString *, id> * _Nullable)options filterNames:(NSSet<NSString *> * _Nullable)filterNames;
/// 停止扫描
- (void)stopScan;
/// 是否正在搜索
@property (nonatomic, readonly) BOOL isScaning;
@end

@class BLEPeripheral;
@class CBCharacteristic;

@interface BLEAPIManager (SWIFT_EXTENSION(DesayBluetooth))
- (void)didUpdateState:(enum BLEManagerState)state;
- (void)didDiscoverPeripheral:(BLEPeripheral * _Nonnull)peripheral;
- (void)peripheral:(BLEPeripheral * _Nonnull)peripheral isReady:(BOOL)isReady error:(NSError * _Nullable)error;
- (void)peripheral:(BLEPeripheral * _Nonnull)peripheral didUpdateValueFor:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
@end

@class Device;
@class DSBLEDevice;

@interface BLEAPIManager (SWIFT_EXTENSION(DesayBluetooth))
/// Mac连接
/// \param mac mac len = 12 17
///
- (void)connectWithMac:(NSString * _Nullable)mac;
/// identifier 连接
/// \param identifier identifier
///
- (void)connectWithIdentifier:(NSString * _Nullable)identifier;
/// 连接设备 （last）
/// \param peripheral peripheral
///
- (void)connectPeripheral:(BLEPeripheral * _Nonnull)peripheral;
/// 通过identifier断开连接
/// \param identifier identifier
///
- (void)disconnectWithIdentifier:(NSString * _Nullable)identifier;
/// 断开连接 （last）
/// \param peripheral peripheral
///
- (void)disconnectPeripheral:(BLEPeripheral * _Nullable)peripheral;
/// 断开连接
- (void)disconnectDevice:(Device * _Nullable)device;
/// 正在连接的设备列表
- (NSArray<DSBLEDevice *> * _Nonnull)pairedDevice SWIFT_WARN_UNUSED_RESULT;
@end



@protocol DSBLEDFUDelegate;
@class DSBLEDFUSet;

@interface BLEAPIManager (SWIFT_EXTENSION(DesayBluetooth))
/// API State
@property (nonatomic, readonly) enum APIState apiState;
/// DFU代理
@property (nonatomic, strong) id <DSBLEDFUDelegate> _Nullable dfuDelegate;
/// 请求DFU
/// \param model DSBLEDFUSet
///
- (void)handleDFUWith:(DSBLEDFUSet * _Nonnull)model;
@end


SWIFT_CLASS("_TtC14DesayBluetooth9BLEDefine")
@interface BLEDefine : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull resultOK;)
+ (NSString * _Nonnull)resultOK SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull resultERR;)
+ (NSString * _Nonnull)resultERR SWIFT_WARN_UNUSED_RESULT;
/// MAC 地址长度 12
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger macLen;)
+ (NSInteger)macLen SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSUInteger, BLEManagerState, closed) {
  BLEManagerStateOff = 0,
  BLEManagerStateOn = 1,
};

@class CBPeripheral;
@class CBService;
@class NSNumber;

/// 模型
SWIFT_CLASS("_TtC14DesayBluetooth13BLEPeripheral")
@interface BLEPeripheral : NSObject
/// CBPeripheral
@property (nonatomic, readonly, strong) CBPeripheral * _Nonnull cbPeripheral;
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
@property (nonatomic, readonly, copy) NSArray<CBService *> * _Nonnull services;
@property (nonatomic, readonly, copy) NSArray<CBCharacteristic *> * _Nonnull characteristics;
@property (nonatomic, readonly, strong) NSNumber * _Nullable rssi;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable advertisementData;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class DSBLESleepBlock;
@class DSBLESleepInfo;

SWIFT_CLASS("_TtC14DesayBluetooth17BLESleepAlgorithm")
@interface BLESleepAlgorithm : NSObject
/// 分析睡眠数据
/// analyze sleep data
/// @param rawData 睡眠原始数据
/// @return 睡眠状态 NSArray<WMSleepInfo *>
- (NSArray<DSBLESleepInfo *> * _Nullable)analyzeSleepRawData:(NSArray<DSBLESleepBlock *> * _Nonnull)rawData deviceName:(NSString * _Nonnull)deviceName SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum DSBLEDeviceType : NSUInteger;
enum DSBLEProtocolType : NSUInteger;

SWIFT_CLASS("_TtC14DesayBluetooth7BLEUtil")
@interface BLEUtil : NSObject
/// 标准mac
/// \param mac 不含:的mac
///
///
/// returns:
/// 标准mac
+ (NSString * _Nullable)standardMacBy:(NSString * _Nullable)mac SWIFT_WARN_UNUSED_RESULT;
/// 根据设备名获取设备大类型
/// \param name 设备名
///
///
/// returns:
/// 总类型
+ (enum DSBLEDeviceType)deviceTypeBy:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// 根据设备名获取设备协议类型
/// \param name 设备名
///
///
/// returns:
/// 设备协议类型
+ (enum DSBLEProtocolType)protocolTypeBy:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// 根据厂商代码获取设备名字
/// \param manuCode 厂商代码
///
///
/// returns:
/// 设备名字
+ (NSString * _Nonnull)deviceNameBy:(NSString * _Nonnull)manuCode SWIFT_WARN_UNUSED_RESULT;
/// 根据设备名字获取厂商代码
/// \param name 设备名字
///
///
/// returns:
/// 厂商代码
+ (NSString * _Nonnull)manuCodeBy:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// 是否配对
/// \param name 设备名字
///
///
/// returns:
/// 是否配对
+ (BOOL)isPairByName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// 是否配对
/// \param identifier identifier
///
///
/// returns:
/// 是否配对
+ (BOOL)isPairByIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface BLEUtil (SWIFT_EXTENSION(DesayBluetooth))
/// 卡路里计算公式
/// \param weight 重量 千克
///
/// \param distance 距离 米
///
///
/// returns:
/// 小卡
+ (float)calculatorCalorieWithWeight:(float)weight distance:(float)distance SWIFT_WARN_UNUSED_RESULT;
/// 距离计算公式
/// \param height 高度 cm
///
/// \param step 步数
///
///
/// returns:
/// 米
+ (float)calculatorDistanceWithHeight:(float)height step:(NSInteger)step SWIFT_WARN_UNUSED_RESULT;
/// 步数通过结束时间算开始时间
/// \param endTime 结束时间
///
///
/// returns:
/// 开始时间
+ (NSDate * _Nonnull)stepStartTimeBy:(NSDate * _Nonnull)endTime SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC14DesayBluetooth6Device")
@interface Device : NSObject
/// 是否就绪
@property (nonatomic, readonly) BOOL isReady;
/// 断开设备
- (void)disconnect;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

enum DSBLEAutoType : NSUInteger;
@protocol DSBLEBindDelegate;
@protocol DSBLESyncDelegate;
enum DSBLEBandFuncType : NSUInteger;

SWIFT_CLASS("_TtC14DesayBluetooth4Band")
@interface Band : Device
/// 通知代理
@property (nonatomic, copy) void (^ _Nullable notify)(enum DSBLEAutoType, id _Nullable, NSError * _Nullable);
/// 绑定代理
@property (nonatomic, strong) id <DSBLEBindDelegate> _Nullable bindDelegate;
/// 同步代理
@property (nonatomic, strong) id <DSBLESyncDelegate> _Nullable syncDelegate;
- (void)makeFunc:(enum DSBLEBandFuncType)funcType data:(id _Nullable)data callback:(void (^ _Nullable)(id _Nullable, BOOL, NSError * _Nullable))callback;
@end


/// 2.0协议的手环
SWIFT_CLASS("_TtC14DesayBluetooth8BandByte")
@interface BandByte : Band
/// 绑定代理
@property (nonatomic, strong) id <DSBLEBindDelegate> _Nullable bindDelegate;
/// 同步代理
@property (nonatomic, strong) id <DSBLESyncDelegate> _Nullable syncDelegate;
@end






SWIFT_CLASS("_TtC14DesayBluetooth7BandStr")
@interface BandStr : Band
/// 绑定代理
@property (nonatomic, strong) id <DSBLEBindDelegate> _Nullable bindDelegate;
/// 同步代理
@property (nonatomic, strong) id <DSBLESyncDelegate> _Nullable syncDelegate;
@end





typedef SWIFT_ENUM(NSInteger, DFUError, closed) {
  DFUErrorRemoteLegacyDFUSuccess = 1,
  DFUErrorRemoteLegacyDFUInvalidState = 2,
  DFUErrorRemoteLegacyDFUNotSupported = 3,
  DFUErrorRemoteLegacyDFUDataExceedsLimit = 4,
  DFUErrorRemoteLegacyDFUCrcError = 5,
  DFUErrorRemoteLegacyDFUOperationFailed = 6,
  DFUErrorRemoteSecureDFUSuccess = 11,
  DFUErrorRemoteSecureDFUOpCodeNotSupported = 12,
  DFUErrorRemoteSecureDFUInvalidParameter = 13,
  DFUErrorRemoteSecureDFUInsufficientResources = 14,
  DFUErrorRemoteSecureDFUInvalidObject = 15,
  DFUErrorRemoteSecureDFUSignatureMismatch = 16,
  DFUErrorRemoteSecureDFUUnsupportedType = 17,
  DFUErrorRemoteSecureDFUOperationNotpermitted = 18,
  DFUErrorRemoteSecureDFUOperationFailed = 20,
  DFUErrorRemoteSecureDFUExtendedError = 21,
  DFUErrorRemoteExperimentalButtonlessDFUSuccess = 9001,
  DFUErrorRemoteExperimentalButtonlessDFUOpCodeNotSupported = 9002,
  DFUErrorRemoteExperimentalButtonlessDFUOperationFailed = 9004,
  DFUErrorRemoteButtonlessDFUSuccess = 31,
  DFUErrorRemoteButtonlessDFUOpCodeNotSupported = 32,
  DFUErrorRemoteButtonlessDFUOperationFailed = 34,
/// Providing the DFUFirmware is required.
  DFUErrorFileNotSpecified = 101,
/// Given firmware file is not supported.
  DFUErrorFileInvalid = 102,
/// Since SDK 7.0.0 the DFU Bootloader requires the extended Init Packet. For more details, see:
/// http://infocenter.nordicsemi.com/topic/com.nordic.infocenter.sdk5.v11.0.0/bledfu_example_init.html?cp=4_0_0_4_2_1_1_3
  DFUErrorExtendedInitPacketRequired = 103,
/// Before SDK 7.0.0 the init packet could have contained only 2-byte CRC value, and was optional.
/// Providing an extended one instead would cause CRC error during validation (the bootloader assumes that the 2 first bytes
/// of the init packet are the firmware CRC).
  DFUErrorInitPacketRequired = 104,
  DFUErrorFailedToConnect = 201,
  DFUErrorDeviceDisconnected = 202,
  DFUErrorBluetoothDisabled = 203,
  DFUErrorServiceDiscoveryFailed = 301,
  DFUErrorDeviceNotSupported = 302,
  DFUErrorReadingVersionFailed = 303,
  DFUErrorEnablingControlPointFailed = 304,
  DFUErrorWritingCharacteristicFailed = 305,
  DFUErrorReceivingNotificationFailed = 306,
  DFUErrorUnsupportedResponse = 307,
/// Error raised during upload when the number of bytes sent is not equal to number of bytes confirmed in Packet Receipt Notification.
  DFUErrorBytesLost = 308,
/// Error raised when the CRC reported by the remote device does not match. Service has done 3 tries to send the data.
  DFUErrorCrcError = 309,
};

@class DFUFirmwareSize;
enum DFUFirmwareType : uint8_t;

/// The DFUFirmware object wraps the firmware file.
SWIFT_CLASS("_TtC14DesayBluetooth11DFUFirmware")
@interface DFUFirmware : NSObject
/// The name of the firmware file.
@property (nonatomic, readonly, copy) NSString * _Nullable fileName;
/// The URL to the firmware file.
@property (nonatomic, readonly, copy) NSURL * _Nullable fileUrl;
/// Information whether the firmware was successfully initialized.
@property (nonatomic, readonly) BOOL valid;
/// The size of each component of the firmware.
@property (nonatomic, readonly, strong) DFUFirmwareSize * _Nonnull size;
/// Number of connectinos required to transfer the firmware. This does not include the connection needed to switch to the DFU mode.
@property (nonatomic, readonly) NSInteger parts;
/// Creates the DFU Firmware object from a Distribution packet (ZIP). Such file must contain a manifest.json file
/// with firmware metadata and at least one firmware binaries. Read more about the Distribution packet on
/// the DFU documentation.
/// \param urlToZipFile URL to the Distribution packet (ZIP).
///
///
/// returns:
/// The DFU firmware object or null in case of an error.
- (nullable instancetype)initWithUrlToZipFile:(NSURL * _Nonnull)urlToZipFile;
/// Creates the DFU Firmware object from a Distribution packet (ZIP). Such file must contain a manifest.json file
/// with firmware metadata and at least one firmware binaries. Read more about the Distribution packet on
/// the DFU documentation.
/// \param urlToZipFile URL to the Distribution packet (ZIP).
///
/// \param type The type of the firmware to use.
///
///
/// returns:
/// The DFU firmware object or null in case of an error.
- (nullable instancetype)initWithUrlToZipFile:(NSURL * _Nonnull)urlToZipFile type:(enum DFUFirmwareType)type OBJC_DESIGNATED_INITIALIZER;
/// Creates the DFU Firmware object from a Distribution packet (ZIP). Such file must contain a manifest.json file
/// with firmware metadata and at least one firmware binaries. Read more about the Distribution packet on
/// the DFU documentation.
/// \param zipFile The Distribution packet (ZIP) data.
///
///
/// returns:
/// The DFU firmware object or null in case of an error.
- (nullable instancetype)initWithZipFile:(NSData * _Nonnull)zipFile;
/// Creates the DFU Firmware object from a Distribution packet (ZIP). Such file must contain a manifest.json file
/// with firmware metadata and at least one firmware binaries. Read more about the Distribution packet on
/// the DFU documentation.
/// \param zipFile The Distribution packet (ZIP) data.
///
/// \param type The type of the firmware to use.
///
///
/// returns:
/// The DFU firmware object or null in case of an error.
- (nullable instancetype)initWithZipFile:(NSData * _Nonnull)zipFile type:(enum DFUFirmwareType)type OBJC_DESIGNATED_INITIALIZER;
/// Creates the DFU Firmware object from a BIN or HEX file. Setting the DAT file with an Init packet is optional,
/// but may be required by the bootloader (SDK 7.0.0+).
/// \param urlToBinOrHexFile URL to a BIN or HEX file with the firmware.
///
/// \param urlToDatFile An optional URL to a DAT file with the Init packet.
///
/// \param type The type of the firmware.
///
///
/// returns:
/// The DFU firmware object or null in case of an error.
- (nullable instancetype)initWithUrlToBinOrHexFile:(NSURL * _Nonnull)urlToBinOrHexFile urlToDatFile:(NSURL * _Nullable)urlToDatFile type:(enum DFUFirmwareType)type OBJC_DESIGNATED_INITIALIZER;
/// Creates the DFU Firmware object from a BIN data. Setting the DAT file with an Init packet is optional,
/// but may be required by the bootloader (SDK 7.0.0+).
/// \param binFile Content of the new firmware as BIN.
///
/// \param datFile An optional DAT file data with the Init packet.
///
/// \param type The type of the firmware.
///
///
/// returns:
/// The DFU firmware object or null in case of an error.
- (nullable instancetype)initWithBinFile:(NSData * _Nonnull)binFile datFile:(NSData * _Nullable)datFile type:(enum DFUFirmwareType)type OBJC_DESIGNATED_INITIALIZER;
/// Creates the DFU Firmware object from a HEX data. Setting the DAT file with an Init packet is optional,
/// but may be required by the bootloader (SDK 7.0.0+).
/// \param hexFile Content of the HEX file containing new firmware.
///
/// \param datFile An optional DAT file data with the Init packet.
///
/// \param type The type of the firmware.
///
///
/// returns:
/// The DFU firmware object or null in case of an error.
- (nullable instancetype)initWithHexFile:(NSData * _Nonnull)hexFile datFile:(NSData * _Nullable)datFile type:(enum DFUFirmwareType)type OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14DesayBluetooth15DFUFirmwareSize")
@interface DFUFirmwareSize : NSObject
/// Size of the softdevice in bytes.
/// If not even, add it to the bootloader size to get size of softdevice_bootloader.bin.
@property (nonatomic, readonly) uint32_t softdevice;
/// Size of the bootloader in bytes.
/// If equal to 1 the ZIP contains SD+BL and size of SD or BL is not known exactly, but their sum is known.
@property (nonatomic, readonly) uint32_t bootloader;
/// Size of the application in bytes.
@property (nonatomic, readonly) uint32_t application;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// The type of the BIN or HEX file, or selection of content from the Distribution packet (ZIP) file.
/// Select .softdeviceBootloaderApplication to sent all files from the ZIP (even it there is let’s say
/// only application). This works as a filter. If you have SD+BL+App in the ZIP, but want to send
/// only App, you may set the type to .application.
/// <ul>
///   <li>
///     softdevice:           Firmware file will be sent as a new Softdevice.
///   </li>
///   <li>
///     bootloader:           Firmware file will be sent as a new Bootloader.
///   </li>
///   <li>
///     application:          Firmware file will be sent as a new application.
///   </li>
///   <li>
///     softdeviceBootloader: Firmware file will be sent as a new Softdevice + Bootloader.
///   </li>
///   <li>
///     softdeviceBootloaderApplication: All content of the ZIP file will be sent.
///   </li>
/// </ul>
typedef SWIFT_ENUM(uint8_t, DFUFirmwareType, closed) {
  DFUFirmwareTypeSoftdevice = 1,
  DFUFirmwareTypeBootloader = 2,
  DFUFirmwareTypeApplication = 4,
  DFUFirmwareTypeSoftdeviceBootloader = 3,
  DFUFirmwareTypeSoftdeviceBootloaderApplication = 7,
};


/// The DFUPeripheralSelectorDelegate is used when both the Softdevice (or Softdevice and Bootloader) and Application
/// are going to be updated, or when a peripheral is to be switched to the bootloader mode that will change its address.
/// This library supports sending both BIN files from a ZIP Distribution Packet automatically.
/// However, when sending the Softdevice update, the DFU Bootloader may remove the current application in order to
/// make space for the new Softdevice firmware (Legacy DFU, or Secure DFU with single bank enabled when new SD+BL are larger then space available)
/// or may advertise in Bootloader mode for number of seconds (Secure DFU). When the new Softdevice is flashed the bootloader restarts the device
/// and starts advertising in DFU Bootloader mode.
/// Since SDK 8.0.0, to solve caching problem on a host that is no bonded (in case there is no Service Changed characteristic),
/// the bootloader starts to advertise with an address incremented by 1.
/// The DFU Library has to scan for a peripheral with this new address. However, as iOS does not expose the device
/// address in the public CoreBluetooth API, address matching, used on Android, can not be used.
/// Instead, this selector is used. The DFU Service will start scanning for peripherals with a UUID filter, where
/// the list of required UUID is returned by the <code>filterBy(hint:)</code> method. If your device in the Bootloader mode
/// does not advertise with any service UUIDs, or this is not enough, you may select a target device
/// by their advertising packet or RSSI using this delegate.
/// In SDK 14.0.0 a new feature was added to the Buttonless DFU for non-bonded devices which allows to send a unique name
/// to the device before it is switched to bootloader mode. After jump, the bootloader will advertise with this name
/// as the Complete Local Name making it easy to select proper device. In this case you don’t have to override the default
/// peripheral selector. More: http://infocenter.nordicsemi.com/topic/com.nordic.infocenter.sdk5.v14.0.0/service_dfu.html
SWIFT_PROTOCOL("_TtP14DesayBluetooth29DFUPeripheralSelectorDelegate_")
@protocol DFUPeripheralSelectorDelegate
/// Returns whether the given peripheral is a device in DFU Bootloader mode.
/// \param peripheral The peripheral to be checked.
///
/// \param advertisementData Scanned advertising data.
///
/// \param RSSI Received signal strength indication in dBm.
///
/// \param name An optional name to look for in the advertisement packet (see Buttonless DFU in SDK 14).
///
///
/// returns:
/// True (YES) if given peripheral is what service is looking for.
- (BOOL)select:(CBPeripheral * _Nonnull)peripheral advertisementData:(NSDictionary<NSString *, id> * _Nonnull)advertisementData RSSI:(NSNumber * _Nonnull)RSSI hint:(NSString * _Nullable)name SWIFT_WARN_UNUSED_RESULT;
/// Returns an optional list of services that the scanner will use to filter advertising packets
/// when scanning for a device in DFU Bootloader mode. To find out what UUID you should return,
/// switch your device to DFU Bootloader mode (with a button!) and check the advertisment packet.
/// The result of this method will be applied to
/// <code>centralManager.scanForPeripheralsWithServices([CBUUID]?, options: [String : AnyObject]?)</code>.
/// \param dfuServiceUUID The UUID of the DFU service that was used to flash SoftDevice and/or Bootloader.
/// Usually this service UUID is present in the DFU Bootloader’s advertising packet. Then this method may simply
/// return [dfuServiceUUID].
///
///
/// returns:
/// An optional list of services or nil.
- (NSArray<CBUUID *> * _Nullable)filterByHint:(CBUUID * _Nonnull)dfuServiceUUID SWIFT_WARN_UNUSED_RESULT;
@end


/// The default selector. Selects the first device with Legacy or Secure DFU Service UUID in the advertising packet.
SWIFT_CLASS("_TtC14DesayBluetooth21DFUPeripheralSelector")
@interface DFUPeripheralSelector : NSObject <DFUPeripheralSelectorDelegate>
- (BOOL)select:(CBPeripheral * _Nonnull)peripheral advertisementData:(NSDictionary<NSString *, id> * _Nonnull)advertisementData RSSI:(NSNumber * _Nonnull)RSSI hint:(NSString * _Nullable)name SWIFT_WARN_UNUSED_RESULT;
- (NSArray<CBUUID *> * _Nullable)filterByHint:(CBUUID * _Nonnull)dfuServiceUUID SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// The progress delegates may be used to notify user about progress updates.
/// The only method of the delegate is only called when the service is in the Uploading state.
SWIFT_PROTOCOL("_TtP14DesayBluetooth19DFUProgressDelegate_")
@protocol DFUProgressDelegate
/// Callback called in the <code>State.Uploading</code> state. Gives detailed information about the progress
/// and speed of transmission. This method is always called at least two times (for 0% and 100%)
/// if upload has started and did not fail.
/// This method is called in the main thread and is safe to update any UI.
/// \param part Number of part that is currently being transmitted. Parts start from 1
/// and may have value either 1 or 2. Part 2 is used only when there were Soft Device and/or
/// Bootloader AND an Application in the Distribution Packet and the DFU target does not
/// support sending all files in a single connection. First the SD and/or BL will be sent, then
/// the service will disconnect, reconnect again to the (new) bootloader and send the Application.
///
/// \param totalParts Total number of parts that are to be send (this is always equal to 1 or 2).
///
/// \param progress The current progress of uploading the current part in percentage (values 0-100).
/// Each value will be called at most once - in case of a large file a value e.g. 3% will be called only once,
/// despite that it will take more than one packet to reach 4%. In case of a small firmware file
/// some values may be ommited. For example, if firmware file would be only 20 bytes you would get
/// a callback 0% (called always) and then 100% when done.
///
/// \param currentSpeedBytesPerSecond The current speed in bytes per second.
///
/// \param avgSpeedBytesPerSecond The average speed in bytes per second.
///
- (void)dfuProgressDidChangeFor:(NSInteger)part outOf:(NSInteger)totalParts to:(NSInteger)progress currentSpeedBytesPerSecond:(double)currentSpeedBytesPerSecond avgSpeedBytesPerSecond:(double)avgSpeedBytesPerSecond;
@end


SWIFT_CLASS("_TtC14DesayBluetooth20DFUServiceController")
@interface DFUServiceController : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// Call this method to pause uploading during the transmition process. The transmition can be resumed
/// only when connection remains. If service has already started sending firmware data it will pause after receiving
/// next Packet Receipt Notification. Otherwise it will continue to send Op Codes and pause before sending the first bytes
/// of the firmware. With Packet Receipt Notifications disabled it is the only moment when upload may be paused.
- (void)pause;
/// Call this method to resume the paused transffer, otherwise does nothing.
- (void)resume;
/// Aborts the upload. The phone will disconnect from peripheral. The peripheral will try to
/// recover the last firmware. Might, restart in the Bootloader mode if the application has been
/// removed.
/// Abort (Reset) command will be sent instead of a next Op Code, or after receiving a
/// Packet Receipt Notification. It PRM procedure is disabled it will continue until the whole
/// firmware is sent and then Reset will be sent instead of Verify Firmware op code.
///
/// returns:
/// true if DFU has been aborted.
- (BOOL)abort SWIFT_WARN_UNUSED_RESULT;
/// Starts again aborted DFU operation.
- (void)restart;
/// Returns true if DFU operation has been paused.
@property (nonatomic, readonly) BOOL paused;
/// Returns true if DFU operation has been aborted.
@property (nonatomic, readonly) BOOL aborted;
@end

enum DFUState : NSInteger;

/// The service delegate reports about state changes and errors.
SWIFT_PROTOCOL("_TtP14DesayBluetooth18DFUServiceDelegate_")
@protocol DFUServiceDelegate
/// Callback called when state of the DFU Service has changed.
/// This method is called in the main thread and is safe to update any UI.
/// \param state the new state fo the service
///
- (void)dfuStateDidChangeTo:(enum DFUState)state;
/// Called after an error occurred.
/// The device will be disconnected and DFU operation has been aborted.
/// This method is called in the main thread and is safe to update any UI.
/// \param error the error code
///
/// \param message error description
///
- (void)dfuError:(enum DFUError)error didOccurWithMessage:(NSString * _Nonnull)message;
@end

@protocol LoggerDelegate;
@class DFUUuidHelper;
@class CBCentralManager;

/// The DFUServiceInitiator object should be used to send a firmware update to a remote BLE target compatible
/// with the Nordic Semiconductor’s DFU (Device Firmware Update).
/// A <code>delegate</code>, <code>progressDelegate</code> and <code>logger</code> may be specified in order to receive status information.
SWIFT_CLASS("_TtC14DesayBluetooth19DFUServiceInitiator")
@interface DFUServiceInitiator : NSObject
/// The service delegate is an object that will be notified about state changes of the DFU Service.
/// Setting it is optional but recommended.
@property (nonatomic, weak) id <DFUServiceDelegate> _Nullable delegate;
/// An optional progress delegate will be called only during upload. It notifies about current upload
/// percentage and speed.
@property (nonatomic, weak) id <DFUProgressDelegate> _Nullable progressDelegate;
/// The logger is an object that should print given messages to the user. It is optional.
@property (nonatomic, weak) id <LoggerDelegate> _Nullable logger;
/// The selector object is used when the device needs to disconnect and start advertising with a different address
/// to avodi caching problems, for example after switching to the Bootloader mode, or during sending a firmware
/// containing a Softdevice (or Softdevice and Bootloader) and the Application.
/// After flashing the first part (containing the Softdevice), the device restarts in the
/// DFU Bootloader mode and may (since SDK 8.0.0) start advertising with an address incremented by 1.
/// The peripheral specified in the <code>init</code> may no longer be used as there is no device advertising with its address.
/// The DFU Service will scan for a new device and connect to the first device returned by the selector.
/// The default selecter returns the first device with the required DFU Service UUID in the advertising packet
/// (Secure or Legacy DFU Service UUID).
/// Ignore this property if not updating Softdevice and Application from one ZIP file or your
@property (nonatomic, strong) id <DFUPeripheralSelectorDelegate> _Nonnull peripheralSelector;
/// The number of packets of firmware data to be received by the DFU target before sending
/// a new Packet Receipt Notification.
/// If this value is 0, the packet receipt notification will be disabled by the DFU target.
/// Default value is 12.
/// PRNs are no longer required on iOS 11 and MacOS 10.13 or newer, but make sure
/// your device is able to be updated without. Old SDKs, before SDK 7 had very slow
/// memory management and could not handle packets that fast. If your device
/// is based on such SDK it is recommended to leave the default value.
/// Disabling PRNs on iPhone 8 with iOS 11.1.2 increased the speed from 1.7 KB/s to 2.7 KB/s
/// on DFU from SDK 14.1 where packet size is 20 bytes (higher MTU not supported yet).
/// On older versions, higher values of PRN (~20+), or disabling it, may speed up
/// the upload process, but also cause a buffer overflow and hang the Bluetooth adapter.
/// Maximum verified values were 29 for iPhone 6 Plus or 22 for iPhone 7, both iOS 10.1.
@property (nonatomic) uint16_t packetReceiptNotificationParameter;
/// <em>Legacy DFU only.</em>
/// Setting this property to true will prevent from jumping to the DFU Bootloader
/// mode in case there is no DFU Version characteristic. Use it if the DFU operation can be handled by your
/// device running in the application mode. If the DFU Version characteristic exists, the
/// information whether to begin DFU operation, or jump to bootloader, is taken from the
/// characteristic’s value. The value returned equal to 0x0100 (read as: minor=1, major=0, or version 0.1)
/// means that the device is in the application mode and buttonless jump to DFU Bootloader is supported.
/// Currently, the following values of the DFU Version characteristic are supported:
/// <em>No DFU Version characteristic</em> - one of the first implementations of DFU Service. The device
/// may support only Application update (version from SDK 4.3.0), may support Soft Device, Bootloader
/// and Application update but without buttonless jump to bootloader (SDK 6.0.0) or with
/// buttonless jump (SDK 6.1.0).
/// The DFU Library determines whether the device is in application mode or in DFU Bootloader mode
/// by counting number of services: if no DFU Service found - device is in app mode and does not support
/// buttonless jump, if the DFU Service is the only service found (except General Access and General Attribute
/// services) - it assumes it is in DFU Bootloader mode and may start DFU immediately, if there is
/// at least one service except DFU Service - the device is in application mode and supports buttonless
/// jump. In the lase case, you want to perform DFU operation without jumping - call the setForceDfu(force:Bool)
/// method with parameter equal to true.
/// <em>0.1</em> - Device is in a mode that supports buttonless jump to the DFU Bootloader
/// <em>0.5</em> - Device can handle DFU operation. Extended Init packet is required. Bond information is lost
/// in the bootloader mode and after updating an app. Released in SDK 7.0.0.
/// <em>0.6</em> - Bond information is kept in bootloader mode and may be kept after updating application
/// (DFU Bootloader must be configured to preserve the bond information).
/// <em>0.7</em> - The SHA-256 firmware hash is used in the Extended Init Packet instead of CRC-16.
/// This feature is transparent for the DFU Service.
/// <em>0.8</em> - The Extended Init Packet is signed using the private key. The bootloader, using the public key,
/// is able to verify the content. Released in SDK 9.0.0 as experimental feature.
/// Caution! The firmware type (Application, Bootloader, SoftDevice or SoftDevice+Bootloader) is not
/// encrypted as it is not a part of the Extended Init Packet. A change in the protocol will be required
/// to fix this issue.
/// By default the DFU Library will try to switch the device to the DFU Bootloader mode if it finds
/// more services then one (DFU Service). It assumes it is already in the bootloader mode
/// if the only service found is the DFU Service. Setting the forceDfu to true (YES) will prevent from
/// jumping in these both cases.
@property (nonatomic) BOOL forceDfu;
/// In SDK 14.0.0 a new feature was added to the Buttonless DFU for non-bonded devices which allows to send a unique name
/// to the device before it is switched to bootloader mode. After jump, the bootloader will advertise with this name
/// as the Complete Local Name making it easy to select proper device. In this case you don’t have to override the default
/// peripheral selector.
/// Read more: http://infocenter.nordicsemi.com/topic/com.nordic.infocenter.sdk5.v14.0.0/service_dfu.html
/// Setting this flag to false you will disable this feature. iOS DFU Library will not send the 0x02-[len]-[new name]
/// command prior jumping and will rely on the DfuPeripheralSelectorDelegate just like it used to in previous SDK.
/// This flag is ignored in Legacy DFU.
/// <em>It is recommended to keep this flag set to true unless necessary.</em>
/// For more information read: https://github.com/NordicSemiconductor/IOS-nRF-Connect/issues/16
@property (nonatomic) BOOL alternativeAdvertisingNameEnabled;
/// Set this flag to true to enable experimental buttonless feature in Secure DFU. When the
/// experimental Buttonless DFU Service is found on a device, the service will use it to
/// switch the device to the bootloader mode, connect to it in that mode and proceed with DFU.
/// <em>Please, read the information below before setting it to true.</em>
/// In the SDK 12.x the Buttonless DFU feature for Secure DFU was experimental.
/// It is NOT recommended to use it: it was not properly tested, had implementation bugs
/// (e.g. https://devzone.nordicsemi.com/question/100609/sdk-12-bootloader-erased-after-programming/) and
/// does not required encryption and therefore may lead to DOS attack (anyone can use it to switch the device
/// to bootloader mode). However, as there is no other way to trigger bootloader mode on devices
/// without a button, this DFU Library supports this service, but the feature must be explicitly enabled here.
/// Be aware, that setting this flag to false will no protect your devices from this kind of attacks, as
/// an attacker may use another app for that purpose. To be sure your device is secure remove this
/// experimental service from your device.
/// Spec:
/// Buttonless DFU Service UUID: 8E400001-F315-4F60-9FB8-838830DAEA50
/// Buttonless DFU characteristic UUID: 8E400001-F315-4F60-9FB8-838830DAEA50 (the same)
/// Enter Bootloader Op Code: 0x01
/// Correct return value: 0x20-01-01 , where:
/// 0x20 - Response Op Code
/// 0x01 - Request Code
/// 0x01 - Success
/// The device should disconnect and restart in DFU mode after sending the notification.
/// In SDK 13 this issue will be fixed by a proper implementation (bonding required,
/// passing bond information to the bootloader, encryption, well tested). It is recommended to use this
/// new service when SDK 13 (or later) is out. TODO: fix the docs when SDK 13 is out.
@property (nonatomic) BOOL enableUnsafeExperimentalButtonlessServiceInSecureDfu;
/// UUIDs used during the DFU Process.
/// This allows you to pass in Custom UUIDs for the DFU Service/Characteristics.
@property (nonatomic, strong) DFUUuidHelper * _Nonnull uuidHelper;
/// Creates the DFUServiceInitializer that will allow to send an update to the given peripheral.
/// This constructor takes control over the central manager and peripheral objects.
/// Their delegates will be set to internal library objects and will NOT be reverted to
/// original objects, instead they will be set to nil when DFU is complete, aborted or
/// has failed with an error. An app should restore the delegates (if needed) after
/// receiving .completed or .aborted DFUState, or receiving an error.
/// important:
/// This constructor has been deprecated in favor of <code>init(target: CBPeripheral)</code>,
/// which does not take control over the give peripheral, and is using a copy instead.
/// seealso:
/// peripheralSelector property - a selector used when scanning for a device in DFU Bootloader mode
/// in case you want to update a Softdevice and Application from a single ZIP Distribution Packet.
/// \param centralManager Manager that will be used to connect to the peripheral
///
/// \param target The DFU target peripheral.
///
///
/// returns:
/// The initiator instance.
- (nonnull instancetype)initWithCentralManager:(CBCentralManager * _Nonnull)centralManager target:(CBPeripheral * _Nonnull)target OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use init(queue: DispatchQueue?) instead.");
/// Creates the DFUServiceInitializer that will allow to send an update to peripherals.
/// version:
/// Added in version 4.2 of the iOS DFU Library.
/// seealso:
/// peripheralSelector property - a selector used when scanning for a device in DFU Bootloader mode
/// in case you want to update a Softdevice and Application from a single ZIP Distribution Packet.
/// \param queue The dispatch queue to run BLE operations on.
///
///
/// returns:
/// The initiator instance.
- (nonnull instancetype)initWithQueue:(dispatch_queue_t _Nullable)queue OBJC_DESIGNATED_INITIALIZER;
/// Sets the file with the firmware. The file must be specified before calling
/// <code>start(...)</code> method.
/// \param file The firmware wrapper object.
///
///
/// returns:
/// The initiator instance to allow chain use.
- (DFUServiceInitiator * _Nonnull)withFirmware:(DFUFirmware * _Nonnull)file SWIFT_WARN_UNUSED_RESULT;
/// Starts sending the specified firmware to the DFU target specified in <code>init(centralManager:target)</code>.
/// When started, the service will automatically connect to the target, switch to DFU Bootloader mode
/// (if necessary), and send all the content of the specified firmware file in one or two connections.
/// Two connections will be used if a ZIP file contains a Soft Device and/or Bootloader and an Application.
/// First the Soft Device and/or Bootloader will be transferred, then the service will disconnect, reconnect
/// to the (new) Bootloader again and send the Application (unless the target supports receiving all files
/// in a single connection). The peripheral will NOT be reconnected after the DFU is completed, aborted
/// or has failed.
/// The current version of the DFU Bootloader, due to memory limitations, may receive together only
/// a Softdevice and Bootloader.
/// important:
/// Use <code>start(target: CBPeripheral)</code> instead.
///
/// returns:
/// A DFUServiceController object that can be used to control the DFU operation,
/// or nil, if the file was not set, or the target peripheral was not set.
- (DFUServiceController * _Nullable)start SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use start(target: CBPeripheral) instead.");
/// Starts sending the specified firmware to the given DFU target.
/// When started, the service will automatically connect to the target, switch to DFU Bootloader mode
/// (if necessary), and send all the content of the specified firmware file in one or two connections.
/// Two connections will be used if a ZIP file contains a Soft Device and/or Bootloader and an Application.
/// First the Soft Device and/or Bootloader will be transferred, then the service will disconnect, reconnect
/// to the (new) Bootloader again and send the Application (unless the target supports receiving all files
/// in a single connection). The peripheral will NOT be reconnected after the DFU is completed, aborted
/// or has failed.
/// This method does not take control over the peripheral.
/// A new central manager is used, from which a copy of the peripheral is retrieved. Be warned,
/// that the original peripheral delegate may receive a lot of calls, and it will restart during
/// the process. The app should not send any data to DFU characteristics when DFU is in progress.
/// The current version of the DFU Bootloader, due to memory limitations, may receive together only
/// a Softdevice and Bootloader.
/// \param target The DFU target peripheral.
///
///
/// returns:
/// A DFUServiceController object that can be used to control the DFU operation,
/// or nil, if the file was not set, or the peripheral instance could not be retrieved.
- (DFUServiceController * _Nullable)startWithTarget:(CBPeripheral * _Nonnull)target SWIFT_WARN_UNUSED_RESULT;
/// Starts sending the specified firmware to the DFU target with given identifier.
/// When started, the service will automatically connect to the target, switch to DFU Bootloader mode
/// (if necessary), and send all the content of the specified firmware file in one or two connections.
/// Two connections will be used if a ZIP file contains a Soft Device and/or Bootloader and an Application.
/// First the Soft Device and/or Bootloader will be transferred, then the service will disconnect, reconnect
/// to the (new) Bootloader again and send the Application (unless the target supports receiving all files
/// in a single connection). The peripheral will NOT be reconnected after the DFU is completed, aborted
/// or has failed.
/// This method does not take control over the peripheral.
/// A new central manager is used, from which a copy of the peripheral is retrieved. Be warned,
/// that the original peripheral delegate may receive a lot of calls, and it will restart during
/// the process. The app should not send any data to DFU characteristics when DFU is in progress.
/// The current version of the DFU Bootloader, due to memory limitations, may receive together only
/// a Softdevice and Bootloader.
/// \param uuid The UUID associated with the peer.
///
///
/// returns:
/// A DFUServiceController object that can be used to control the DFU operation,
/// or nil, if the file was not set, or the peripheral instance could not be retrieved.
- (DFUServiceController * _Nullable)startWithTargetWithIdentifier:(NSUUID * _Nonnull)uuid SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// The state of the DFU Service.
/// <ul>
///   <li>
///     connecting:      Service is connecting to the DFU target.
///   </li>
///   <li>
///     starting:        DFU Service is initializing DFU operation.
///   </li>
///   <li>
///     enablingDfuMode: Service is switching the device to DFU mode.
///   </li>
///   <li>
///     uploading:       Service is uploading the firmware.
///   </li>
///   <li>
///     validating:      The DFU target is validating the firmware.
///   </li>
///   <li>
///     disconnecting:   The iDevice is disconnecting or waiting for disconnection.
///   </li>
///   <li>
///     completed:       DFU operation is completed and successful.
///   </li>
///   <li>
///     aborted:         DFU Operation was aborted.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, DFUState, closed) {
  DFUStateConnecting = 0,
  DFUStateStarting = 1,
  DFUStateEnablingDfuMode = 2,
  DFUStateUploading = 3,
  DFUStateValidating = 4,
  DFUStateDisconnecting = 5,
  DFUStateCompleted = 6,
  DFUStateAborted = 7,
};

enum DFUUuidType : NSInteger;

/// DFU UUID object.
SWIFT_CLASS("_TtC14DesayBluetooth7DFUUuid")
@interface DFUUuid : NSObject
/// UUID For the DFU UUID Object.
@property (nonatomic, readonly, strong) CBUUID * _Nonnull uuid;
/// Type of DFU UUID.
@property (nonatomic, readonly) enum DFUUuidType type;
- (nonnull instancetype)initWithUUID:(CBUUID * _Nonnull)withUUID forType:(enum DFUUuidType)forType OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// UUID Helper for DFU Process
/// The UUID can be modified for each of the DFU types supported by
/// the Nordic devices.
SWIFT_CLASS("_TtC14DesayBluetooth13DFUUuidHelper")
@interface DFUUuidHelper : NSObject
/// UUID for Legacy DFU Service.
@property (nonatomic, readonly, strong) CBUUID * _Nonnull legacyDFUService;
/// UUID for Legacy DFU Control Point Characteristic.
@property (nonatomic, readonly, strong) CBUUID * _Nonnull legacyDFUControlPoint;
/// UUID for Legacy DFU Packet Characteristic.
@property (nonatomic, readonly, strong) CBUUID * _Nonnull legacyDFUPacket;
/// UUID for Legacy DFU Version Characteristic.
@property (nonatomic, readonly, strong) CBUUID * _Nonnull legacyDFUVersion;
/// UUID for Secure DFU Service.
@property (nonatomic, readonly, strong) CBUUID * _Nonnull secureDFUService;
/// UUID for Secure DFU Control Characteristic.
@property (nonatomic, readonly, strong) CBUUID * _Nonnull secureDFUControlPoint;
/// UUID for Secure DFU Packet Characteristic.
@property (nonatomic, readonly, strong) CBUUID * _Nonnull secureDFUPacket;
/// UUID for Buttonless DFU Service.
/// This UUID is also used for the Characteristic.
@property (nonatomic, readonly, strong) CBUUID * _Nonnull buttonlessExperimentalService;
/// UUID for Buttonless DFU Characteristic.
@property (nonatomic, readonly, strong) CBUUID * _Nonnull buttonlessExperimentalCharacteristic;
/// UUID for Buttonless DFU Without Bond Sharing Characterisitic.
@property (nonatomic, readonly, strong) CBUUID * _Nonnull buttonlessWithoutBonds;
/// UUID for Buttonless DFU With Bond Sharing Characterisitic.
@property (nonatomic, readonly, strong) CBUUID * _Nonnull buttonlessWithBonds;
/// Creates the DFU Helper with Default UUIDs.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Create the DFU UUID Helper with Custom UUIDs.
/// \param uuids Array of Custom UUIDs
///
- (nonnull instancetype)initWithCustomUuids:(NSArray<DFUUuid *> * _Nonnull)uuids;
@end





/// UUID Types for DFU.
typedef SWIFT_ENUM(NSInteger, DFUUuidType, closed) {
/// Legacy DFU Service.
  DFUUuidTypeLagacyService = 0,
/// Legacy DFU Control Point Characteristic.
  DFUUuidTypeLegacyControlPoint = 1,
/// Legacy DFU Packet Characteristic.
  DFUUuidTypeLegacyPacket = 2,
/// Legacy DFU Version Characteristic.
  DFUUuidTypeLegacyVersion = 3,
/// Secure DFU Service.
  DFUUuidTypeSecureService = 4,
/// Secure DFU Control Characteristic.
  DFUUuidTypeSecureControl = 5,
/// Secure DFU Packet Characteristic.
  DFUUuidTypeSecurePacket = 6,
/// Buttonless DFU Service.
  DFUUuidTypeButtonlessService = 7,
/// Buttonless DFU Characteristic.
  DFUUuidTypeButtonlessCharacteristic = 8,
/// Buttonless DFU Without Bond Sharing Characterisitic.
  DFUUuidTypeButtonlessWithoutBondSharing = 9,
/// Buttonless DFU With Bond Sharing Characterisitic.
  DFUUuidTypeButtonlessWithBondSharing = 10,
};


/// alarm class
SWIFT_CLASS("_TtC14DesayBluetooth10DSBLEAlarm")
@interface DSBLEAlarm : NSObject
/// Alarm No. Default = 0
@property (nonatomic) NSUInteger alarmNO;
/// Main switch 主开关
@property (nonatomic) BOOL switchStatus;
/// Eg Time: 0800
@property (nonatomic, copy) NSString * _Nonnull alarmTime;
/// Monday switch 周一开关
@property (nonatomic) BOOL mondaySwitch;
/// Tuesday switch 周二开关
@property (nonatomic) BOOL tuesdaySwitch;
/// Wednesday swtich 周三开关
@property (nonatomic) BOOL wednesdaySwitch;
/// Thursday switch 周四开关
@property (nonatomic) BOOL thursdaySwitch;
/// Friday switch 周五开关
@property (nonatomic) BOOL fridaySwitch;
/// Saturday switch 周六开关
@property (nonatomic) BOOL saturdaySwitch;
/// Sunday switch 周日开关
@property (nonatomic) BOOL sundaySwitch;
/// Date for Time
@property (nonatomic, copy) NSDate * _Nullable alarmDate;
+ (DSBLEAlarm * _Nullable)alarmWithFormat:(NSString * _Nonnull)format index:(NSUInteger)index SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end






/// Alert Distance Setting
SWIFT_CLASS("_TtC14DesayBluetooth18DSBLEAlertDistance")
@interface DSBLEAlertDistance : NSObject
/// near range
@property (nonatomic) NSUInteger nearRange;
/// far range
@property (nonatomic) NSUInteger farRange;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end





/// Alert distance type
/// <ul>
///   <li>
///     near: Near mode
///   </li>
///   <li>
///     far: Far mode
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEAlertType, closed) {
  DSBLEAlertTypeNear = 0,
  DSBLEAlertTypeMedium = 1,
  DSBLEAlertTypeFar = 2,
};


/// ANCS提示设置类.
/// ANCS Setting class
SWIFT_CLASS("_TtC14DesayBluetooth14DSBLEAppNotify")
@interface DSBLEAppNotify : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyPhoneCall;)
+ (NSString * _Nonnull)kDSBLEAppNotifyPhoneCall SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyMessage;)
+ (NSString * _Nonnull)kDSBLEAppNotifyMessage SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyWechat;)
+ (NSString * _Nonnull)kDSBLEAppNotifyWechat SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyQQ;)
+ (NSString * _Nonnull)kDSBLEAppNotifyQQ SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyFacebook;)
+ (NSString * _Nonnull)kDSBLEAppNotifyFacebook SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyTwitter;)
+ (NSString * _Nonnull)kDSBLEAppNotifyTwitter SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyEmail;)
+ (NSString * _Nonnull)kDSBLEAppNotifyEmail SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyWhatsApp;)
+ (NSString * _Nonnull)kDSBLEAppNotifyWhatsApp SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyInstagram;)
+ (NSString * _Nonnull)kDSBLEAppNotifyInstagram SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyLine;)
+ (NSString * _Nonnull)kDSBLEAppNotifyLine SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifySkype;)
+ (NSString * _Nonnull)kDSBLEAppNotifySkype SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyWeibo;)
+ (NSString * _Nonnull)kDSBLEAppNotifyWeibo SWIFT_WARN_UNUSED_RESULT;
/// Add for WW Customer
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAPPNotifyHike;)
+ (NSString * _Nonnull)kDSBLEAPPNotifyHike SWIFT_WARN_UNUSED_RESULT;
/// Add for WW Customer
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAPPNotifyFBMessenger;)
+ (NSString * _Nonnull)kDSBLEAPPNotifyFBMessenger SWIFT_WARN_UNUSED_RESULT;
/// Add for WW Customer
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAPPNotifyGmail;)
+ (NSString * _Nonnull)kDSBLEAPPNotifyGmail SWIFT_WARN_UNUSED_RESULT;
/// Add for WW Customer
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAPPNotifyGoogleHangout;)
+ (NSString * _Nonnull)kDSBLEAPPNotifyGoogleHangout SWIFT_WARN_UNUSED_RESULT;
/// Add for WW Customer
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAPPNotifySnapchat;)
+ (NSString * _Nonnull)kDSBLEAPPNotifySnapchat SWIFT_WARN_UNUSED_RESULT;
/// Add for WW Customer
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAPPNotifyGoogleCalendar;)
+ (NSString * _Nonnull)kDSBLEAPPNotifyGoogleCalendar SWIFT_WARN_UNUSED_RESULT;
/// create new App Notify
/// \param dict Dictionary include All reminder setting
///
///
/// returns:
/// DSBLEAppNotify instance
+ (DSBLEAppNotify * _Nullable)appNotifyWithDict:(NSDictionary<NSString *, NSNumber *> * _Nonnull)dict SWIFT_WARN_UNUSED_RESULT;
- (void)setAppNotifyWithKey:(NSString * _Nonnull)key value:(BOOL)value;
- (BOOL)getAppNoifiyWithKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)allNotifyKeys SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)appNotifyKeys SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end





/// Bracelet Notify
/// <ul>
///   <li>
///     Auto_CheckHR: Check HR result
///   </li>
///   <li>
///     Auto_SportHR: Real time sport HR
///   </li>
///   <li>
///     Auto_Step: Real time step
///   </li>
///   <li>
///     Auto_FindPhone: Location phone
///   </li>
///   <li>
///     Auto_MusicControl: Musci Control
///   </li>
///   <li>
///     Auto_NoSleep: No sleep
///   </li>
///   <li>
///     Auto_BloodPressure: Blood Pressure
///   </li>
///   <li>
///     Auto_oxygen: HR Oxygen
///   </li>
///   <li>
///     Auto_camera
///   </li>
///   <li>
///     Auto_calorie
///   </li>
///   <li>
///     Auto_pai
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEAutoType, closed) {
  DSBLEAutoTypeOther = 0,
  DSBLEAutoTypeCheckHR = 1,
  DSBLEAutoTypeSportHR = 2,
  DSBLEAutoTypeStep = 3,
  DSBLEAutoTypeFindPhone = 4,
  DSBLEAutoTypeMusicControl = 5,
  DSBLEAutoTypeNoSleep = 6,
  DSBLEAutoTypeBloodPressure = 7,
  DSBLEAutoTypeOxygen = 8,
  DSBLEAutoTypeCamera = 9,
  DSBLEAutoTypeCalorie = 10,
  DSBLEAutoTypePai = 11,
  DSBLEAutoTypeSos = 12,
  DSBLEAutoTypeBindResult = 13,
};

/// Send Func Type
/// <ul>
///   <li>
///     Func_Common: Common
///   </li>
///   <li>
///     Func_Alarm: Alarm
///   </li>
///   <li>
///     Func_Target: daily step target
///   </li>
///   <li>
///     Func_Notification: Notification reminder
///   </li>
///   <li>
///     Func_Version: check bracelet version
///   </li>
///   <li>
///     Func_Reboot: Reboot bracelet
///   </li>
///   <li>
///     Func_Bind: Bind braceelt
///   </li>
///   <li>
///     Func_UserInfo: User Info（height,Weight）
///   </li>
///   <li>
///     Func_Battery: Battery of bracelet
///   </li>
///   <li>
///     Func_AutoStep: On/Off realtiem Step
///   </li>
///   <li>
///     Func_Language: Language Setting
///   </li>
///   <li>
///     Func_WristingTime: Wear habit and Writing time
///   </li>
///   <li>
///     Func_Sedentary: Sedentary
///   </li>
///   <li>
///     Func_FindBand: Location the bracelet
///   </li>
///   <li>
///     Func_Active: Active
///   </li>
///   <li>
///     Func_Time: Set Time
///   </li>
///   <li>
///     Func_Timezone: Set timezone
///   </li>
///   <li>
///     Func_DFU: Upgrade braceelt
///   </li>
///   <li>
///     Func_SaveStep: Save step
///   </li>
///   <li>
///     Func_TestHR: Test HR
///   </li>
///   <li>
///     Func_Sync: Sync data from bracelet
///   </li>
///   <li>
///     Func_SyncIcon: Show icon of not in bracelet
///   </li>
///   <li>
///     Func_Camera: Remote Camera
///   </li>
///   <li>
///     Func_FindPhone: Location the Phone
///   </li>
///   <li>
///     Func_MusicControl: Music Control
///   </li>
///   <li>
///     Func_Unit: Unit Set
///   </li>
///   <li>
///     Func_AntiLost: Anti Lost
///   </li>
///   <li>
///     Func_HRMonitor: HR Monitor On/Off
///   </li>
///   <li>
///     Func_MusicStatu: Music Statu
///   </li>
///   <li>
///     Func_24Hour: 12/24 Hour display
///   </li>
///   <li>
///     Func_SportMode: Sport Mode
///   </li>
///   <li>
///     Func_SetPace: Set Pace to bracelet
///   </li>
///   <li>
///     Func_NoSleep: No Sleep On/Off
///   </li>
///   <li>
///     Func_SetRHR: Set Rest Max HR
///   </li>
///   <li>
///     Func_SetDHR: Set Dynamic Max HR
///   </li>
///   <li>
///     Func_Gsensor: Get Gsensor coordinates
///   </li>
///   <li>
///     Func_BloodPressure: Check blood pressure
///   </li>
///   <li>
///     Func_Ancs: use with Func_Notification, first send ancs and then send notification setting
///   </li>
///   <li>
///     Func_SportInfo: Set Sport info
///   </li>
///   <li>
///     Func_Motor: Set Motor Vibration type
///   </li>
///   <li>
///     Func_Reset: Clean all data
///   </li>
///   <li>
///     Func_Display: Srceen Display
///   </li>
///   <li>
///     Func_PAI: Set PAI on/off
///   </li>
///   <li>
///     Func_PAILimits: Search PAI limits
///   </li>
///   <li>
///     Func_PAIHR: Set PAI static and dynamic HR
///   </li>
///   <li>
///     Func_Gender
///   </li>
///   <li>
///     Func_PAITotal: Get PAI Total
///   </li>
///   <li>
///     Func_AntiStatus: Bond to auti-lost status
///   </li>
///   <li>
///     Func_AlertDistance: Distance Alert for Band
///   </li>
///   <li>
///     Func_StepGoal: Goal achievement
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEBandFuncType, closed) {
  DSBLEBandFuncTypeNone = 0,
  DSBLEBandFuncTypeCommon = 1,
  DSBLEBandFuncTypeAlarm = 2,
  DSBLEBandFuncTypeTarget = 3,
  DSBLEBandFuncTypeNotification = 4,
  DSBLEBandFuncTypeVersion = 5,
  DSBLEBandFuncTypeReboot = 6,
  DSBLEBandFuncTypeBind = 7,
  DSBLEBandFuncTypeUserInfo = 8,
  DSBLEBandFuncTypeBattery = 9,
  DSBLEBandFuncTypeAutoStep = 10,
  DSBLEBandFuncTypeLanguage = 11,
  DSBLEBandFuncTypeWristingTime = 12,
  DSBLEBandFuncTypeSedentary = 13,
  DSBLEBandFuncTypeFindBand = 14,
  DSBLEBandFuncTypeActive = 15,
  DSBLEBandFuncTypeTime = 16,
  DSBLEBandFuncTypeTimezone = 17,
  DSBLEBandFuncTypeDfu = 18,
  DSBLEBandFuncTypeSaveStep = 19,
  DSBLEBandFuncTypeTestHR = 20,
  DSBLEBandFuncTypeSync = 21,
  DSBLEBandFuncTypeSyncIcon = 22,
  DSBLEBandFuncTypeCamera = 23,
  DSBLEBandFuncTypeFindPhone = 24,
  DSBLEBandFuncTypeMusicControl = 25,
  DSBLEBandFuncTypeUnit = 26,
  DSBLEBandFuncTypeAntiLost = 27,
  DSBLEBandFuncTypeHrMonitor = 28,
  DSBLEBandFuncTypeMusicStatu = 29,
  DSBLEBandFuncTypeHourSystem = 30,
  DSBLEBandFuncTypeSportMode = 31,
  DSBLEBandFuncTypeSetPace = 32,
  DSBLEBandFuncTypeNoSleep = 33,
  DSBLEBandFuncTypeSetRHR = 34,
  DSBLEBandFuncTypeSetDHR = 35,
  DSBLEBandFuncTypeGsensor = 36,
  DSBLEBandFuncTypeBloodPressure = 37,
  DSBLEBandFuncTypeAncs = 38,
  DSBLEBandFuncTypeSportInfo = 39,
  DSBLEBandFuncTypeMotor = 40,
  DSBLEBandFuncTypeReset = 41,
  DSBLEBandFuncTypeDisplay = 42,
  DSBLEBandFuncTypePai = 43,
  DSBLEBandFuncTypePaiLimits = 44,
  DSBLEBandFuncTypePaiHR = 45,
  DSBLEBandFuncTypeGender = 46,
  DSBLEBandFuncTypePaiTotal = 47,
  DSBLEBandFuncTypeClearData = 48,
  DSBLEBandFuncTypeSn = 49,
  DSBLEBandFuncTypeTestBP = 50,
  DSBLEBandFuncTypeConnect = 51,
  DSBLEBandFuncTypeAntiStatus = 52,
  DSBLEBandFuncTypeAlertDistance = 53,
  DSBLEBandFuncTypeAlertType = 54,
  DSBLEBandFuncTypeRestMode = 55,
  DSBLEBandFuncTypeWeather = 56,
  DSBLEBandFuncTypeCalorie = 57,
  DSBLEBandFuncTypeDistance = 58,
  DSBLEBandFuncTypeDrink = 59,
  DSBLEBandFuncTypeDial = 60,
  DSBLEBandFuncTypeAge = 61,
  DSBLEBandFuncTypeBright = 62,
  DSBLEBandFuncTypeStepGoal = 63,
  DSBLEBandFuncTypeClimate = 64,
  DSBLEBandFuncTypeTextDisplay = 65,
  DSBLEBandFuncTypeMac = 66,
};

enum DSBLEBindingState : NSUInteger;

/// 绑定 过程
SWIFT_PROTOCOL("_TtP14DesayBluetooth17DSBLEBindDelegate_")
@protocol DSBLEBindDelegate
/// 处理绑定状态
/// \param state 绑定状态
///
- (void)handleBindState:(enum DSBLEBindingState)state;
@end

typedef SWIFT_ENUM(NSUInteger, DSBLEBindingState, closed) {
  DSBLEBindingStateIdel = 0,
  DSBLEBindingStateBond = 1,
  DSBLEBindingStateActive = 2,
  DSBLEBindingStateSuccess = 3,
  DSBLEBindingStateFail = 4,
};


/// Blood Pressure class
SWIFT_CLASS("_TtC14DesayBluetooth18DSBLEBloodPressure")
@interface DSBLEBloodPressure : NSObject
/// time
@property (nonatomic, copy) NSDate * _Null_unspecified time;
/// 心肌收縮（systole） 高压
@property (nonatomic) NSUInteger systole;
/// 心肌舒張（diastole） 低压
@property (nonatomic) NSUInteger diastole;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Set Blood Pressure pramas (Only for DS-D8)
SWIFT_CLASS("_TtC14DesayBluetooth21DSBLEBloodPressureSet")
@interface DSBLEBloodPressureSet : NSObject
/// true for begin blood pressure, false for stop blood pressure
@property (nonatomic) BOOL on;
/// systole for proof test value
@property (nonatomic) NSUInteger systole;
/// diastole for proof test value
@property (nonatomic) NSUInteger diastole;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end





/// Device display bright type
typedef SWIFT_ENUM(NSUInteger, DSBLEBrightType, closed) {
  DSBLEBrightTypeLow = 0,
  DSBLEBrightTypeMedium = 1,
  DSBLEBrightTypeHigh = 2,
};

enum DSBLEWeatherState : NSUInteger;
enum DSBLETemperatureType : NSUInteger;

/// Climate,send temperature and weather state
SWIFT_CLASS("_TtC14DesayBluetooth12DSBLEClimate")
@interface DSBLEClimate : NSObject
@property (nonatomic) enum DSBLEWeatherState weatherState;
@property (nonatomic) enum DSBLETemperatureType type;
@property (nonatomic) NSInteger temperature;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end






/// DFU 过程
SWIFT_PROTOCOL("_TtP14DesayBluetooth16DSBLEDFUDelegate_")
@protocol DSBLEDFUDelegate
/// DFU进度
/// \param progress 进度
///
- (void)DFUProgress:(float)progress;
/// DFU开始
- (void)DFUStart;
/// DFU结束，成功
- (void)DFUEnd;
/// DFU出错
/// \param error 出错原因
///
- (void)DFUError:(NSString * _Nonnull)error;
@end

enum DSBLEOTAFileType : uint8_t;

/// Set DFU
SWIFT_CLASS("_TtC14DesayBluetooth11DSBLEDFUSet")
@interface DSBLEDFUSet : NSObject
/// device name
@property (nonatomic, copy) NSString * _Nonnull deviceName;
/// device MAC 12 count
@property (nonatomic, copy) NSString * _Nonnull deviceMac;
/// file path
@property (nonatomic, copy) NSString * _Nonnull filePath;
/// file type, Only for BLE Protocol 2.X Devices
@property (nonatomic) enum DSBLEOTAFileType fileType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class DSBLEScalesData;

SWIFT_CLASS("_TtC14DesayBluetooth11DSBLEDevice")
@interface DSBLEDevice : BLEPeripheral
/// type
@property (nonatomic, readonly) enum DSBLEDeviceType type;
@property (nonatomic, readonly, copy) NSString * _Nullable mac;
/// MAC len = 12 + 5
@property (nonatomic, readonly, copy) NSString * _Nullable standardMac;
/// OTA? true false
@property (nonatomic, readonly) BOOL state;
/// 2组 称数据
@property (nonatomic, readonly, strong) DSBLEScalesData * _Nullable scalesData;
/// power (50 = 50%)
@property (nonatomic, readonly) NSInteger power;
@end

typedef SWIFT_ENUM(NSUInteger, DSBLEDeviceType, closed) {
  DSBLEDeviceTypeBand = 0,
  DSBLEDeviceTypeScales = 1,
  DSBLEDeviceTypeShoe = 2,
  DSBLEDeviceTypeWatch = 3,
  DSBLEDeviceTypeTracker = 4,
  DSBLEDeviceTypeOther = 5,
};

/// Display Mode (Just DS-D6,DS-D8)
/// <ul>
///   <li>
///     Portrait          Screen Display: Portrait
///   </li>
///   <li>
///     LandscapeLeft     Screen Display: Landscape Left
///   </li>
///   <li>
///     LandscapeRight    Screen Display: Landscape Right
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEDisplayType, closed) {
  DSBLEDisplayTypePortrait = 1,
  DSBLEDisplayTypeLandscapeLeft = 2,
  DSBLEDisplayTypeLandscapeRight = 3,
};

/// Fish Cast type
typedef SWIFT_ENUM(NSUInteger, DSBLEFishCastType, closed) {
  DSBLEFishCastTypeSPINNING = 0,
  DSBLEFishCastTypeFLYFISHING = 1,
  DSBLEFishCastTypeTROLLING = 2,
  DSBLEFishCastTypeJIGGING = 3,
  DSBLEFishCastTypeCARPMATCH = 4,
  DSBLEFishCastTypeINSHORE = 5,
  DSBLEFishCastTypePOLE = 6,
};

/// Fish Event type
typedef SWIFT_ENUM(NSUInteger, DSBLEFishEventType, closed) {
  DSBLEFishEventTypeCAST = 0,
  DSBLEFishEventTypeCATCH = 1,
  DSBLEFishEventTypeMARKER = 2,
};


/// GPS Data
SWIFT_CLASS("_TtC14DesayBluetooth8DSBLEGPS")
@interface DSBLEGPS : NSObject
/// longitude 经度
@property (nonatomic) double longitude;
/// latitude 纬度
@property (nonatomic) double latitude;
/// Time
@property (nonatomic, copy) NSDate * _Nonnull time;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Gender
/// <ul>
///   <li>
///     male: Man
///   </li>
///   <li>
///     female: Woman
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEGender, closed) {
  DSBLEGenderMale = 0,
  DSBLEGenderFemale = 1,
};


/// Gsensor coordinate
SWIFT_CLASS("_TtC14DesayBluetooth12DSBLEGsensor")
@interface DSBLEGsensor : NSObject
@property (nonatomic) NSInteger x;
@property (nonatomic) NSInteger y;
@property (nonatomic) NSInteger z;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end






/// HRMonitor
SWIFT_CLASS("_TtC14DesayBluetooth14DSBLEHRMonitor")
@interface DSBLEHRMonitor : NSObject
/// swtich
@property (nonatomic) BOOL swtich;
/// Interval Time for check HR, Default 30min, only support by DS-F9.
@property (nonatomic) NSUInteger interval;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// HeartRate Type
/// <ul>
///   <li>
///     test: test
///   </li>
///   <li>
///     monitor: monitor
///   </li>
///   <li>
///     sport: sport
///   </li>
///   <li>
///     rest: rest
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEHeartRateType, closed) {
  DSBLEHeartRateTypeTest = 0,
  DSBLEHeartRateTypeMonitor = 1,
  DSBLEHeartRateTypeSport = 3,
  DSBLEHeartRateTypeRest = 2,
};


/// heart rate and blood oxygens class
SWIFT_CLASS("_TtC14DesayBluetooth14DSBLEHeartrate")
@interface DSBLEHeartrate : NSObject
/// time
@property (nonatomic, copy) NSDate * _Null_unspecified time;
/// heart rate value
@property (nonatomic) enum DSBLEHeartRateType type;
/// heart rate value
@property (nonatomic) NSUInteger hr;
/// blood oxygen value
@property (nonatomic) NSUInteger bo;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSUInteger, DSBLEHourSystemType, closed) {
  DSBLEHourSystemTypeHour12 = 0,
  DSBLEHourSystemTypeHour24 = 1,
};

/// Bracelet Support Language
/// <ul>
///   <li>
///     EN:  English
///   </li>
///   <li>
///     CHS: Chinese
///   </li>
///   <li>
///     FR:  French
///   </li>
///   <li>
///     IT:  Italian
///   </li>
///   <li>
///     ES:  Spanish
///   </li>
///   <li>
///     TR:  Turkish
///   </li>
///   <li>
///     PL:  Polish
///   </li>
///   <li>
///     JP:  Japanese
///   </li>
///   <li>
///     HU:  Hungarian
///   </li>
///   <li>
///     DS:  German
///   </li>
///   <li>
///     RU:  Russian
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLELanguageType, closed) {
  DSBLELanguageTypeEN = 0,
  DSBLELanguageTypeCHS = 1,
  DSBLELanguageTypeFR = 2,
  DSBLELanguageTypeIT = 3,
  DSBLELanguageTypeES = 4,
  DSBLELanguageTypeTR = 5,
  DSBLELanguageTypePL = 6,
  DSBLELanguageTypeJP = 7,
  DSBLELanguageTypeHU = 8,
  DSBLELanguageTypeDS = 9,
  DSBLELanguageTypeRU = 10,
};


/// NoSleep feedback Only for LE
SWIFT_CLASS("_TtC14DesayBluetooth12DSBLENoSleep")
@interface DSBLENoSleep : NSObject
/// total min
@property (nonatomic) NSUInteger total;
/// less time
@property (nonatomic) NSUInteger timeInterval;
/// when set to bracelet, feedback just return ok/err
@property (nonatomic) BOOL isSuccess;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Device OTA file type, Only for BLE Protocol 2.0 Device
typedef SWIFT_ENUM(uint8_t, DSBLEOTAFileType, closed) {
  DSBLEOTAFileTypeFramework = 0x00,
  DSBLEOTAFileTypeAgps = 0x04,
};


/// PAI Heartrate
SWIFT_CLASS("_TtC14DesayBluetooth17DSBLEPAIHeartrate")
@interface DSBLEPAIHeartrate : NSObject
/// Static Heartrate
@property (nonatomic) NSUInteger staticHR;
/// Max Heartrate
@property (nonatomic) NSUInteger maxHR;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end





enum DSBLEPAIValueType : NSUInteger;

/// PAI result info
SWIFT_CLASS("_TtC14DesayBluetooth12DSBLEPAIInfo")
@interface DSBLEPAIInfo : NSObject
/// Time for pai
@property (nonatomic, copy) NSDate * _Null_unspecified time;
/// Value type
@property (nonatomic) enum DSBLEPAIValueType type;
/// pai
@property (nonatomic) NSUInteger value;
/// pai interval
@property (nonatomic) NSUInteger interval;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// PAI Limits Only for LE(HW01-Pro HW02-Plus)
SWIFT_CLASS("_TtC14DesayBluetooth14DSBLEPAILimits")
@interface DSBLEPAILimits : NSObject
/// low limits
@property (nonatomic) NSUInteger low;
/// medium limits
@property (nonatomic) NSUInteger medium;
/// high limits
@property (nonatomic) NSUInteger high;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// PAI Seting
/// <ul>
///   <li>
///     off: off
///   </li>
///   <li>
///     normal: Normal mode
///   </li>
///   <li>
///     high: High mode
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEPAIType, closed) {
  DSBLEPAITypeOff = 0,
  DSBLEPAITypeNormal = 1,
  DSBLEPAITypeHigh = 2,
};


/// PAI value
SWIFT_CLASS("_TtC14DesayBluetooth13DSBLEPAIValue")
@interface DSBLEPAIValue : NSObject
/// total Pai
@property (nonatomic) NSUInteger totalPAI;
/// daily Pai
@property (nonatomic) NSUInteger dailyPAI;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// PAI Value Type
/// <ul>
///   <li>
///     low: off
///   </li>
///   <li>
///     medium: Normal mode
///   </li>
///   <li>
///     high: High mode
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEPAIValueType, closed) {
  DSBLEPAIValueTypeLow = 0,
  DSBLEPAIValueTypeMedium = 1,
  DSBLEPAIValueTypeHigh = 2,
};

typedef SWIFT_ENUM(NSUInteger, DSBLEProtocolType, closed) {
  DSBLEProtocolTypeOther = 0,
  DSBLEProtocolTypeBand1_103 = 1,
  DSBLEProtocolTypeBand1_521 = 2,
  DSBLEProtocolTypeBand1_Z18 = 3,
  DSBLEProtocolTypeBand2 = 4,
  DSBLEProtocolTypeScalesLF = 5,
  DSBLEProtocolTypeScalesCS = 6,
  DSBLEProtocolTypeShoeDS = 7,
  DSBLEProtocolTypeTracker06 = 8,
};


/// Rest mode
SWIFT_CLASS("_TtC14DesayBluetooth13DSBLERestMode")
@interface DSBLERestMode : NSObject
/// swtich
@property (nonatomic) BOOL swtich;
/// startTime
@property (nonatomic, copy) NSDate * _Nonnull startTime;
/// endTime
@property (nonatomic, copy) NSDate * _Nonnull endTime;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end





enum DSBLEScalesType : NSUInteger;

/// Scales sync data
SWIFT_CLASS("_TtC14DesayBluetooth15DSBLEScalesData")
@interface DSBLEScalesData : NSObject
/// time
@property (nonatomic, copy) NSDate * _Null_unspecified time;
/// type
@property (nonatomic) enum DSBLEScalesType type;
/// weight (g)
@property (nonatomic) float weight;
/// impedance
@property (nonatomic) NSUInteger impedance;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Send Func Type
/// <ul>
///   <li>
///     Func_Common: Common
///   </li>
///   <li>
///     Func_Active: Active
///   </li>
///   <li>
///     Func_Time: Set Time
///   </li>
///   <li>
///     Func_Sync: Sync data from bracelet
///   </li>
///   <li>
///     Func_WUnit: Weight Unit for Scales
///   </li>
///   <li>
///     Func_Pregnant: Pregnant Mode for Scales
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEScalesFuncType, closed) {
  DSBLEScalesFuncTypeNone = 0,
  DSBLEScalesFuncTypeCommon = 1,
  DSBLEScalesFuncTypeTime = 2,
  DSBLEScalesFuncTypeSync = 3,
  DSBLEScalesFuncTypeClearData = 4,
  DSBLEScalesFuncTypeWUnit = 5,
  DSBLEScalesFuncTypePregnant = 6,
};

typedef SWIFT_ENUM(NSUInteger, DSBLEScalesType, closed) {
  DSBLEScalesTypeNone = 0,
  DSBLEScalesTypeFat = 1,
  DSBLEScalesTypeBody = 2,
  DSBLEScalesTypeBaby = 3,
  DSBLEScalesTypeKitchen = 4,
};


/// 扫描 连接 过程
SWIFT_PROTOCOL("_TtP14DesayBluetooth24DSBLEScanConnectDelegate_")
@protocol DSBLEScanConnectDelegate
@optional
/// 蓝牙状态改变反馈
/// \param state state
///
- (void)notifyState:(enum BLEManagerState)state;
/// Retsore state Dict
/// <ul>
///   <li>
///     @seealso            CBCentralManagerRestoredStatePeripheralsKey;
///   </li>
///   <li>
///     @seealso            CBCentralManagerRestoredStateScanServicesKey;
///   </li>
///   <li>
///     @seealso            CBCentralManagerRestoredStateScanOptionsKey;
///   </li>
/// </ul>
/// \param dict 
///
- (void)restoreStateDict:(NSDictionary<NSString *, id> * _Nonnull)dict;
/// 扫描发现设备
/// \param device device
///
- (void)didDiscoverDevice:(DSBLEDevice * _Nonnull)device;
/// 准备连接DFU设备
/// \param device device
///
- (void)connectDFUDevice:(DSBLEDevice * _Nonnull)device;
/// 连接设备
/// \param device device
///
- (void)didConnectDevice:(DSBLEDevice * _Nonnull)device;
/// 断开设备
/// \param device device
///
- (void)didDisconnectDevice:(DSBLEDevice * _Nonnull)device;
@end


/// 久坐数据
/// sedentary reminder class
SWIFT_CLASS("_TtC14DesayBluetooth14DSBLESedentary")
@interface DSBLESedentary : NSObject
/// Sedentary time.
/// During this time,bracelet will calculate the steps,if not reach the min steps,bracelet will notify user.
/// 30=30 Min
/// 60=60 Min
/// 90=90 Min
@property (nonatomic) NSUInteger sedentaryTime;
/// Yes for Sedentary reminder ON
/// No for Sedentary reminde OFF
@property (nonatomic) BOOL swtich;
/// Date time for bracelet start check the Sedentary
@property (nonatomic, copy) NSDate * _Nonnull startTime;
/// Date time for bracelet stop check the Sedentary
@property (nonatomic, copy) NSDate * _Nonnull endTime;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end





/// Send Func Type
/// <ul>
///   <li>
///     Func_Common: Common
///   </li>
///   <li>
///     Func_Version: check bracelet version
///   </li>
///   <li>
///     Func_Battery: Battery of bracelet
///   </li>
///   <li>
///     Func_AutoStep: On/Off realtiem Step
///   </li>
///   <li>
///     Func_Time: Set Time
///   </li>
///   <li>
///     Func_Sync: Sync data from bracelet
///   </li>
///   <li>
///     Func_SetPace: Set Pace to bracelet
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEShoeFuncType, closed) {
  DSBLEShoeFuncTypeNone = 0,
  DSBLEShoeFuncTypeCommon = 1,
  DSBLEShoeFuncTypeVersion = 2,
  DSBLEShoeFuncTypeBattery = 3,
  DSBLEShoeFuncTypeAutoStep = 4,
  DSBLEShoeFuncTypeSync = 5,
  DSBLEShoeFuncTypeSetPace = 6,
  DSBLEShoeFuncTypeTime = 7,
};


/// Shop real time step
SWIFT_CLASS("_TtC14DesayBluetooth15DSBLEShoeRTStep")
@interface DSBLEShoeRTStep : NSObject
/// walk step
@property (nonatomic) uint32_t walk;
/// run step
@property (nonatomic) uint32_t run;
/// cycle step
@property (nonatomic) uint32_t cycle;
/// downstairs step
@property (nonatomic) uint32_t downstairs;
/// upstairs step
@property (nonatomic) uint32_t upstairs;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



enum DSBLEShoeStepType : NSUInteger;

/// Shop sync data
SWIFT_CLASS("_TtC14DesayBluetooth17DSBLEShoeStepInfo")
@interface DSBLEShoeStepInfo : NSObject
/// step time (end)
@property (nonatomic, copy) NSDate * _Null_unspecified time;
/// step type
@property (nonatomic) enum DSBLEShoeStepType type;
/// step
@property (nonatomic) uint32_t step;
/// Duration
@property (nonatomic) NSUInteger duration;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Shoe Step type
/// <ul>
///   <li>
///     0 other: Sit/Static
///   </li>
///   <li>
///     1 walk:  walk
///   </li>
///   <li>
///     2 run:   run
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEShoeStepType, closed) {
  DSBLEShoeStepTypeOther = 0,
  DSBLEShoeStepTypeWalk = 1,
  DSBLEShoeStepTypeRun = 2,
  DSBLEShoeStepTypeDown = 3,
  DSBLEShoeStepTypeUp = 4,
  DSBLEShoeStepTypeCycle = 5,
};

enum DSBLESleepValueType : NSUInteger;
enum DSBLESleepBlockType : NSUInteger;

/// Original sleep info
SWIFT_CLASS("_TtC14DesayBluetooth15DSBLESleepBlock")
@interface DSBLESleepBlock : NSObject
/// Time for sleep state.
@property (nonatomic, copy) NSDate * _Null_unspecified time;
/// sleep state
@property (nonatomic) enum DSBLESleepValueType value;
/// block type
@property (nonatomic) enum DSBLESleepBlockType type;
/// timeinterval from 2010.1.1 00:00:00
@property (nonatomic) NSUInteger timeInterval;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// sleep block type
/// <ul>
///   <li>
///     0 start: Begin
///   </li>
///   <li>
///     1 entry: Entry sleep
///   </li>
///   <li>
///     2 deep:  Sleeping
///   </li>
///   <li>
///     3 end:   End
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLESleepBlockType, closed) {
  DSBLESleepBlockTypeStart = 0,
  DSBLESleepBlockTypeEntry = 1,
  DSBLESleepBlockTypeDeep = 2,
  DSBLESleepBlockTypeEnd = 3,
};

@class DSBLESleepState;

/// Sleep result model
SWIFT_CLASS("_TtC14DesayBluetooth14DSBLESleepInfo")
@interface DSBLESleepInfo : NSObject
/// Begin Time for sleep
@property (nonatomic, copy) NSDate * _Null_unspecified beginTime;
/// End time for sleep
@property (nonatomic, copy) NSDate * _Null_unspecified endTime;
/// light Sleep Duration
@property (nonatomic) NSUInteger lightSleepDuration;
/// deep Sleep Duration
@property (nonatomic) NSUInteger deepSleepDuration;
/// awake duration
@property (nonatomic) NSUInteger awakeDuration;
/// sleep state array
@property (nonatomic, copy) NSArray<DSBLESleepState *> * _Nonnull sleepStates;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum DSBLESleepType : NSUInteger;

/// Sleep state info
SWIFT_CLASS("_TtC14DesayBluetooth15DSBLESleepState")
@interface DSBLESleepState : NSObject
@property (nonatomic, copy) NSDate * _Null_unspecified beginTime;
@property (nonatomic, copy) NSDate * _Null_unspecified endTime;
@property (nonatomic) enum DSBLESleepType state;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// sleep state for app – app sleep info
/// <ul>
///   <li>
///     0 awake: Wake up
///   </li>
///   <li>
///     2 light: Light Sleep
///   </li>
///   <li>
///     3 deep: Deep Sleep
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLESleepType, closed) {
  DSBLESleepTypeAwake = 0,
  DSBLESleepTypeLight = 2,
  DSBLESleepTypeDeep = 3,
};

/// sleep state for Algorithm — Original sleep info
/// <ul>
///   <li>
///     0  none: None
///   </li>
///   <li>
///     1  wake: Wake up
///   </li>
///   <li>
///     2  walk: Wake And Walk
///   </li>
///   <li>
///     3  run: Wake And Run
///   </li>
///   <li>
///     11 light: Light Sleep
///   </li>
///   <li>
///     12 deep: Deep Sleep
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLESleepValueType, closed) {
  DSBLESleepValueTypeNone = 0,
  DSBLESleepValueTypeWake = 1,
  DSBLESleepValueTypeWalk = 2,
  DSBLESleepValueTypeRun = 3,
  DSBLESleepValueTypeLight = 11,
  DSBLESleepValueTypeDeep = 12,
};

enum DSBLESyncSportType : NSUInteger;
enum DSBLESportType : NSUInteger;

/// Sync Sport
SWIFT_CLASS("_TtC14DesayBluetooth10DSBLESport")
@interface DSBLESport : NSObject
/// time
@property (nonatomic, copy) NSDate * _Null_unspecified time;
/// 状态
@property (nonatomic) enum DSBLESyncSportType type;
/// 类型
@property (nonatomic) enum DSBLESportType sType;
/// 数据
@property (nonatomic) NSUInteger step;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Sync Sport2 for Purifit 2.0
SWIFT_CLASS("_TtC14DesayBluetooth11DSBLESport2")
@interface DSBLESport2 : NSObject
/// time
@property (nonatomic, copy) NSDate * _Null_unspecified startTime;
@property (nonatomic, copy) NSDate * _Null_unspecified endTime;
/// 类型
@property (nonatomic) enum DSBLESportType sType;
/// 数据，跑步为步数，其他暂时未支持
@property (nonatomic) NSInteger data;
/// 卡路里，单位为卡
@property (nonatomic) NSInteger cal;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Sport info (sync to bracelet) for sport mode (Only for MZ,DS-D9)
SWIFT_CLASS("_TtC14DesayBluetooth14DSBLESportInfo")
@interface DSBLESportInfo : NSObject
/// Set time,Unit(s) when continue sport. For state = start, time set to 0. (This attribute in MZ,DS-D9 will take effect)
@property (nonatomic) NSUInteger time;
/// Set distance,Unit(m)
@property (nonatomic) NSUInteger distance;
/// Set calorie,Unit(c)
@property (nonatomic) NSUInteger calorie;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end





enum DSBLESportState : NSUInteger;

/// Sport set class for sport mode
SWIFT_CLASS("_TtC14DesayBluetooth13DSBLESportSet")
@interface DSBLESportSet : NSObject
/// Set sport state,control bracelet to start or stop sport Mode. (All bracelet except B103)
@property (nonatomic) enum DSBLESportState state;
/// Set sport type. (This attribute in MZ,DS-D9 will take effect)
@property (nonatomic) enum DSBLESportType type;
/// Set time,Unit(s)  when continue sport. For state = start, time set to 0. (This attribute in MZ,DS-D9 will take effect)
@property (nonatomic) NSUInteger time;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end





/// Sport state
typedef SWIFT_ENUM(NSUInteger, DSBLESportState, closed) {
  DSBLESportStateStop = 0,
  DSBLESportStateStart = 1,
  DSBLESportStatePause = 2,
};

/// Sport type
typedef SWIFT_ENUM(NSUInteger, DSBLESportType, closed) {
  DSBLESportTypeNormal = 0,
  DSBLESportTypeRun = 1,
  DSBLESportTypeCycling = 2,
  DSBLESportTypeWalk = 3,
  DSBLESportTypeStrength = 4,
  DSBLESportTypeFree = 5,
  DSBLESportTypeSwim = 6,
  DSBLESportTypeSevenMin = 7,
};


/// step info class
SWIFT_CLASS("_TtC14DesayBluetooth13DSBLEStepInfo")
@interface DSBLEStepInfo : NSObject
/// step time (end)
@property (nonatomic, copy) NSDate * _Null_unspecified time;
@property (nonatomic, copy) NSDate * _Null_unspecified starTtime;
/// step type
@property (nonatomic) enum DSBLESportType type;
/// step
@property (nonatomic) NSUInteger step;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14DesayBluetooth13DSBLESyncData")
@interface DSBLESyncData : NSObject
/// Original sleeps
@property (nonatomic, copy) NSArray<DSBLESleepBlock *> * _Nonnull sleeps;
/// Steps
@property (nonatomic, copy) NSArray<DSBLEStepInfo *> * _Nonnull steps;
/// heartrates & bloodoxygen
@property (nonatomic, copy) NSArray<DSBLEHeartrate *> * _Nonnull heartratesAndBloodOxygens;
/// BloodPressure
@property (nonatomic, copy) NSArray<DSBLEBloodPressure *> * _Nonnull bloodPressures;
/// PAI
@property (nonatomic, copy) NSArray<DSBLEPAIInfo *> * _Nonnull pais;
/// Sport
@property (nonatomic, copy) NSArray<DSBLESport *> * _Nonnull sports;
/// Shoe Steps
@property (nonatomic, copy) NSArray<DSBLEShoeStepInfo *> * _Nonnull shoeSteps;
/// Sport for 2.0
@property (nonatomic, copy) NSArray<DSBLESport2 *> * _Nonnull sports2;
/// GPS
@property (nonatomic, copy) NSArray<DSBLEGPS *> * _Nonnull gps;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 同步过程
SWIFT_PROTOCOL("_TtP14DesayBluetooth17DSBLESyncDelegate_")
@protocol DSBLESyncDelegate
/// 同步数据 进度
/// progress of data synchronization
/// \param progress progress 进度值(0.0-1.0) progress value
///
///
/// returns:
/// progress
- (void)syncProgressWithProgress:(float)progress;
/// 即将开始同步
/// Sync is about to begin
- (void)syncWillStart;
/// 同步即将结束
/// Syncing is coming to an end
- (void)syncWillEnd;
/// 同步出错
/// An error occurred attempting to synchronize
- (void)syncError;
/// synchronized data(同步后的数据)
/// \param syncData DSBLESyncData
///
- (void)syncFinishedWithSyncResultData:(DSBLESyncData * _Nullable)syncData;
@end

/// Sync Sport Type
typedef SWIFT_ENUM(NSUInteger, DSBLESyncSportType, closed) {
  DSBLESyncSportTypeStart = 0,
  DSBLESyncSportTypeStop = 1,
};

/// temperature type
typedef SWIFT_ENUM(NSUInteger, DSBLETemperatureType, closed) {
  DSBLETemperatureTypeNegative = 0,
  DSBLETemperatureTypePositive = 1,
};

/// Text Display Mode (Just DS-D6,DS-D8)
/// <ul>
///   <li>
///     Portrait          Text Display: Portrait
///   </li>
///   <li>
///     Landscape         Text Display: Landscape
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLETextDisplayType, closed) {
  DSBLETextDisplayTypePortrait = 1,
  DSBLETextDisplayTypeLandscape = 0,
};

/// Tracker Notify
typedef SWIFT_ENUM(NSUInteger, DSBLETrackerAutoType, closed) {
/// Get all gsensor from Tracker
  DSBLETrackerAutoTypeGsensor = 0,
/// Get Cast result from Tracker
  DSBLETrackerAutoTypeCast = 1,
  DSBLETrackerAutoTypeOther = 2,
};


/// Tracker Cast Data
SWIFT_CLASS("_TtC14DesayBluetooth16DSBLETrackerCast")
@interface DSBLETrackerCast : NSObject
@property (nonatomic) NSInteger maxX;
@property (nonatomic) NSInteger minX;
@property (nonatomic) NSInteger maxY;
@property (nonatomic) NSInteger minY;
@property (nonatomic) NSInteger maxZ;
@property (nonatomic) NSInteger minZ;
/// Fish type
@property (nonatomic) enum DSBLEFishCastType fishType;
/// Event type
@property (nonatomic) enum DSBLEFishEventType eventType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end






/// Tracker Cast Log Data
SWIFT_CLASS("_TtC14DesayBluetooth19DSBLETrackerCastLog")
@interface DSBLETrackerCastLog : NSObject
/// UTC Time
@property (nonatomic, copy) NSDate * _Nonnull time;
/// Battery
@property (nonatomic) NSInteger battery;
/// Fish type
@property (nonatomic) enum DSBLEFishCastType fishType;
/// Event type
@property (nonatomic) enum DSBLEFishEventType eventType;
/// total of Gsensor data
@property (nonatomic) NSInteger pageNum;
/// Current X
@property (nonatomic) NSInteger currentX;
/// Current Y
@property (nonatomic) NSInteger currentY;
/// Current Z
@property (nonatomic) NSInteger currentZ;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Send Func Type
typedef SWIFT_ENUM(NSUInteger, DSBLETrackerFuncType, closed) {
/// <ul>
///   <li>
///     Func_None: defalt value
///   </li>
/// </ul>
  DSBLETrackerFuncTypeNone = 0,
/// <ul>
///   <li>
///     Func_Common: Can send command by bytes
///   </li>
/// </ul>
  DSBLETrackerFuncTypeCommon = 1,
/// <ul>
///   <li>
///     Func_Version: Get version of tracker
///   </li>
/// </ul>
  DSBLETrackerFuncTypeVersion = 2,
/// <ul>
///   <li>
///     Func_Time: Set Time
///   </li>
/// </ul>
  DSBLETrackerFuncTypeTime = 3,
/// <ul>
///   <li>
///     Func_Language: Language Setting
///   </li>
/// </ul>
  DSBLETrackerFuncTypeLanguage = 4,
/// <ul>
///   <li>
///     Func_DFU: Upgrade Tracker
///   </li>
/// </ul>
  DSBLETrackerFuncTypeDfu = 5,
/// <ul>
///   <li>
///     Func_24Hour: 12/24 Hour display
///   </li>
/// </ul>
  DSBLETrackerFuncTypeHourSystem = 6,
/// <ul>
///   <li>
///     Func_Gsensor: Get Gsensor coordinates
///   </li>
/// </ul>
  DSBLETrackerFuncTypeGsensor = 7,
/// <ul>
///   <li>
///     Func_Reset: Clean all data
///   </li>
/// </ul>
  DSBLETrackerFuncTypeReset = 8,
/// <ul>
///   <li>
///     Func_Cast: Setting cast type, event type and GSensor range
///   </li>
/// </ul>
  DSBLETrackerFuncTypeCast = 9,
/// <ul>
///   <li>
///     Func_Fish: Start or stop fish
///   </li>
/// </ul>
  DSBLETrackerFuncTypeFish = 10,
/// <ul>
///   <li>
///     Func_Reboot: Reboot Tracker
///   </li>
/// </ul>
  DSBLETrackerFuncTypeReboot = 11,
/// <ul>
///   <li>
///     Func_Bind: Bind Tracker
///   </li>
/// </ul>
  DSBLETrackerFuncTypeBind = 12,
/// <ul>
///   <li>
///     Func_Active: Active Tracker
///   </li>
/// </ul>
  DSBLETrackerFuncTypeActive = 13,
/// <ul>
///   <li>
///     Func_SN: Get SN of Tracker
///   </li>
/// </ul>
  DSBLETrackerFuncTypeSn = 14,
/// <ul>
///   <li>
///     Func_Battery: Get battery of Tracker
///   </li>
/// </ul>
  DSBLETrackerFuncTypeBattery = 15,
/// <ul>
///   <li>
///     Func_SyncPerios: Set data upload period
///   </li>
/// </ul>
  DSBLETrackerFuncTypeSyncPeriod = 16,
};

/// Unit System
/// <ul>
///   <li>
///     MS: Metric system
///   </li>
///   <li>
///     BS: British system
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEUnitType, closed) {
  DSBLEUnitTypeBS = 0,
  DSBLEUnitTypeMS = 1,
};


/// User information setting
SWIFT_CLASS("_TtC14DesayBluetooth13DSBLEUserInfo")
@interface DSBLEUserInfo : NSObject
/// Height Range(100~250)cm
@property (nonatomic) NSUInteger height;
/// Weight Range(25~200)kg
@property (nonatomic) NSUInteger weight;
@property (nonatomic) enum DSBLEGender gender;
/// Age Range(0~125)
@property (nonatomic) NSUInteger age;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end






/// Version information
SWIFT_CLASS("_TtC14DesayBluetooth12DSBLEVersion")
@interface DSBLEVersion : NSObject
/// User display
@property (nonatomic, copy) NSString * _Nonnull display;
/// Version,use it to judge upgrade firmware.
@property (nonatomic) NSUInteger version;
/// Vendor code
@property (nonatomic, copy) NSString * _Nonnull vendor;
/// Original data
@property (nonatomic, copy) NSString * _Nonnull data;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



enum DSBLEVibrationType : NSUInteger;

/// Set Vibration pramas (Only for DS-D8,DS-D9,DS-D6,HW01)
SWIFT_CLASS("_TtC14DesayBluetooth17DSBLEVibrationSet")
@interface DSBLEVibrationSet : NSObject
/// Vibration type
@property (nonatomic) enum DSBLEVibrationType type;
/// true for open motor vibration, false for close motor vibration
@property (nonatomic) BOOL on;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end





/// Motor vibration strength
typedef SWIFT_ENUM(NSUInteger, DSBLEVibrationType, closed) {
  DSBLEVibrationTypeLow = 1,
  DSBLEVibrationTypeMiddle = 2,
  DSBLEVibrationTypeHigh = 3,
};


/// weather
SWIFT_CLASS("_TtC14DesayBluetooth12DSBLEWeather")
@interface DSBLEWeather : NSObject
@property (nonatomic) NSInteger aqi;
@property (nonatomic) enum DSBLETemperatureType type;
@property (nonatomic) NSInteger temperature;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end





/// weather state
typedef SWIFT_ENUM(NSUInteger, DSBLEWeatherState, closed) {
/// 多云
  DSBLEWeatherStateCloudy = 0,
/// 雷
  DSBLEWeatherStateThunder = 1,
/// 晴天
  DSBLEWeatherStateFine = 2,
/// 乌云
  DSBLEWeatherStateDarkClouds = 3,
/// 雾
  DSBLEWeatherStateFog = 4,
/// 雪
  DSBLEWeatherStateSnow = 5,
/// 雨
  DSBLEWeatherStateRain = 6,
/// 少云
  DSBLEWeatherStatePartlyCloudy = 7,
/// 阵雨
  DSBLEWeatherStateShower = 8,
};

enum DSBLEWristingType : NSUInteger;

/// Wristing Time setting Model
SWIFT_CLASS("_TtC14DesayBluetooth17DSBLEWristingTime")
@interface DSBLEWristingTime : NSObject
@property (nonatomic) enum DSBLEWristingType wristingType;
/// Wristing Time extend setting Model (Not include: B521 B103 B502)
/// Add startTime and endTime.
/// start time.
@property (nonatomic, copy) NSDate * _Nullable startTime;
/// end  time.
@property (nonatomic, copy) NSDate * _Nullable endTime;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end





/// Wristing time type
/// wearHabit Which hand to wear
/// <ul>
///   <li>
///     off: 0
///   </li>
///   <li>
///     auto: 1 not all bracelet support this type
///   </li>
///   <li>
///     left: 2
///   </li>
///   <li>
///     right: 3
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEWristingType, closed) {
  DSBLEWristingTypeOff = 0,
  DSBLEWristingTypeAuto = 1,
  DSBLEWristingTypeLeft = 2,
  DSBLEWristingTypeRight = 3,
};







SWIFT_CLASS("_TtC14DesayBluetooth25LegacyDFUServiceInitiator")
@interface LegacyDFUServiceInitiator : DFUServiceInitiator
- (DFUServiceController * _Nullable)start SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithCentralManager:(CBCentralManager * _Nonnull)centralManager target:(CBPeripheral * _Nonnull)target OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED;
- (nonnull instancetype)initWithQueue:(dispatch_queue_t _Nullable)queue OBJC_DESIGNATED_INITIALIZER;
@end

/// Log level. Logger application may filter log entries based on their level. Levels allow to ignore less important messages.
/// warning:
/// -     Important messages.
/// <ul>
///   <li>
///     Debug -       Lowest priority. Usually names of called methods or callbacks received.
///   </li>
///   <li>
///     Verbose -     Low priority messages what the service is doing.
///   </li>
///   <li>
///     Info -        Messages about completed tasks.
///   </li>
///   <li>
///     Application - Messages about application level events, in this case DFU messages in human-readable form.
///   </li>
///   <li>
///     Error -       Highest priority messages with errors.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, LogLevel, closed) {
  LogLevelDebug = 0,
  LogLevelVerbose = 1,
  LogLevelInfo = 5,
  LogLevelApplication = 10,
  LogLevelWarning = 15,
  LogLevelError = 20,
};


/// The Logger delegate.
SWIFT_PROTOCOL("_TtP14DesayBluetooth14LoggerDelegate_")
@protocol LoggerDelegate
/// This method is called whenever a new log entry is to be saved. The logger implementation should save this or present it to the user.
/// It is NOT safe to update any UI from this method as multiple threads may log.
/// \param level the log level
///
/// \param message the message
///
- (void)logWith:(enum LogLevel)level message:(NSString * _Nonnull)message;
@end


SWIFT_CLASS("_TtC14DesayBluetooth6Scales")
@interface Scales : Device
- (BOOL)hasAuthorized SWIFT_WARN_UNUSED_RESULT;
- (void)authorizedBy:(NSString * _Nonnull)mac callback:(void (^ _Nonnull)(BOOL, NSString * _Nullable))callback;
- (void)makeFunc:(enum DSBLEScalesFuncType)funcType data:(id _Nullable)data callback:(void (^ _Nullable)(id _Nullable, BOOL, NSError * _Nullable))callback;
@end


SWIFT_CLASS("_TtC14DesayBluetooth25SecureDFUServiceInitiator")
@interface SecureDFUServiceInitiator : DFUServiceInitiator
- (DFUServiceController * _Nullable)start SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithCentralManager:(CBCentralManager * _Nonnull)centralManager target:(CBPeripheral * _Nonnull)target OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED;
- (nonnull instancetype)initWithQueue:(dispatch_queue_t _Nullable)queue OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14DesayBluetooth4Shoe")
@interface Shoe : Device
/// 通知代理
@property (nonatomic, copy) void (^ _Nullable notify)(enum DSBLEAutoType, id _Nullable, NSError * _Nullable);
/// 同步代理
@property (nonatomic, strong) id <DSBLESyncDelegate> _Nullable syncDelegate;
- (void)makeFunc:(enum DSBLEShoeFuncType)funcType data:(id _Nullable)data callback:(void (^ _Nullable)(id _Nullable, BOOL, NSError * _Nullable))callback;
@end


SWIFT_CLASS("_TtC14DesayBluetooth7Tracker")
@interface Tracker : Device
/// 通知代理
@property (nonatomic, copy) void (^ _Nullable notify)(enum DSBLETrackerAutoType, id _Nullable, NSError * _Nullable);
/// 绑定代理
@property (nonatomic, strong) id <DSBLEBindDelegate> _Nullable bindDelegate;
- (void)makeFunc:(enum DSBLETrackerFuncType)funcType data:(id _Nullable)data callback:(void (^ _Nullable)(id _Nullable, BOOL, NSError * _Nullable))callback;
@end


SWIFT_CLASS("_TtC14DesayBluetooth10ZipArchive")
@interface ZipArchive : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// Opens the ZIP archive and returs a list of URLs to all unzipped files.
/// Unzipped files were moved to a temporary destination in Cache Directory.
/// \param url URL to a ZIP file
///
///
/// throws:
/// an error if unzipping, or obtaining the list of files failed
///
/// returns:
/// list of URLs to unzipped files in the tmp folder
+ (NSArray<NSURL *> * _Nullable)unzip:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
